{"ast":null,"code":"/*\n* Copyright 2013 ZXing authors\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*      http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n// package com.google.zxing.aztec;\n// import com.google.zxing.BarcodeFormat;\nimport BarcodeFormat from '../BarcodeFormat'; // import com.google.zxing.EncodeHintType;\n\nimport EncodeHintType from '../EncodeHintType'; // import com.google.zxing.aztec.encoder.Encoder;\n\nimport Encoder from './encoder/Encoder'; // import com.google.zxing.common.BitMatrix;\n\nimport BitMatrix from '../common/BitMatrix'; // import java.nio.charset.Charset;\n\nimport Charset from '../util/Charset'; // import java.nio.charset.StandardCharsets;\n\nimport StandardCharsets from '../util/StandardCharsets'; // import java.util.Map;\n\nimport Integer from '../util/Integer';\nimport IllegalStateException from '../IllegalStateException';\nimport IllegalArgumentException from '../IllegalArgumentException';\nimport StringUtils from '../common/StringUtils';\n/**\n * Renders an Aztec code as a {@link BitMatrix}.\n */\n\nvar AztecWriter = function () {\n  function AztecWriter() {} // @Override\n\n\n  AztecWriter.prototype.encode = function (contents, format, width, height) {\n    return this.encodeWithHints(contents, format, width, height, null);\n  }; // @Override\n\n\n  AztecWriter.prototype.encodeWithHints = function (contents, format, width, height, hints) {\n    var charset = StandardCharsets.ISO_8859_1;\n    var eccPercent = Encoder.DEFAULT_EC_PERCENT;\n    var layers = Encoder.DEFAULT_AZTEC_LAYERS;\n\n    if (hints != null) {\n      if (hints.has(EncodeHintType.CHARACTER_SET)) {\n        charset = Charset.forName(hints.get(EncodeHintType.CHARACTER_SET).toString());\n      }\n\n      if (hints.has(EncodeHintType.ERROR_CORRECTION)) {\n        eccPercent = Integer.parseInt(hints.get(EncodeHintType.ERROR_CORRECTION).toString());\n      }\n\n      if (hints.has(EncodeHintType.AZTEC_LAYERS)) {\n        layers = Integer.parseInt(hints.get(EncodeHintType.AZTEC_LAYERS).toString());\n      }\n    }\n\n    return AztecWriter.encodeLayers(contents, format, width, height, charset, eccPercent, layers);\n  };\n\n  AztecWriter.encodeLayers = function (contents, format, width, height, charset, eccPercent, layers) {\n    if (format !== BarcodeFormat.AZTEC) {\n      throw new IllegalArgumentException('Can only encode AZTEC, but got ' + format);\n    }\n\n    var aztec = Encoder.encode(StringUtils.getBytes(contents, charset), eccPercent, layers);\n    return AztecWriter.renderResult(aztec, width, height);\n  };\n\n  AztecWriter.renderResult = function (code, width, height) {\n    var input = code.getMatrix();\n\n    if (input == null) {\n      throw new IllegalStateException();\n    }\n\n    var inputWidth = input.getWidth();\n    var inputHeight = input.getHeight();\n    var outputWidth = Math.max(width, inputWidth);\n    var outputHeight = Math.max(height, inputHeight);\n    var multiple = Math.min(outputWidth / inputWidth, outputHeight / inputHeight);\n    var leftPadding = (outputWidth - inputWidth * multiple) / 2;\n    var topPadding = (outputHeight - inputHeight * multiple) / 2;\n    var output = new BitMatrix(outputWidth, outputHeight);\n\n    for (var inputY\n    /*int*/\n    = 0, outputY = topPadding; inputY < inputHeight; inputY++, outputY += multiple) {\n      // Write the contents of this row of the barcode\n      for (var inputX\n      /*int*/\n      = 0, outputX = leftPadding; inputX < inputWidth; inputX++, outputX += multiple) {\n        if (input.get(inputX, inputY)) {\n          output.setRegion(outputX, outputY, multiple, multiple);\n        }\n      }\n    }\n\n    return output;\n  };\n\n  return AztecWriter;\n}();\n\nexport default AztecWriter; //# sourceMappingURL=AztecWriter.js.map","map":null,"metadata":{},"sourceType":"module"}