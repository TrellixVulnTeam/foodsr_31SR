{"ast":null,"code":"/**\n * Java Formatter class polyfill that works in the JS way.\n */\nvar Formatter = function () {\n  function Formatter() {\n    this.buffer = '';\n  }\n  /**\n   *\n   * @see https://stackoverflow.com/a/13439711/4367683\n   *\n   * @param str\n   * @param arr\n   */\n\n\n  Formatter.form = function (str, arr) {\n    var i = -1;\n\n    function callback(exp, p0, p1, p2, p3, p4) {\n      if (exp === '%%') return '%';\n      if (arr[++i] === undefined) return undefined;\n      exp = p2 ? parseInt(p2.substr(1)) : undefined;\n      var base = p3 ? parseInt(p3.substr(1)) : undefined;\n      var val;\n\n      switch (p4) {\n        case 's':\n          val = arr[i];\n          break;\n\n        case 'c':\n          val = arr[i][0];\n          break;\n\n        case 'f':\n          val = parseFloat(arr[i]).toFixed(exp);\n          break;\n\n        case 'p':\n          val = parseFloat(arr[i]).toPrecision(exp);\n          break;\n\n        case 'e':\n          val = parseFloat(arr[i]).toExponential(exp);\n          break;\n\n        case 'x':\n          val = parseInt(arr[i]).toString(base ? base : 16);\n          break;\n\n        case 'd':\n          val = parseFloat(parseInt(arr[i], base ? base : 10).toPrecision(exp)).toFixed(0);\n          break;\n      }\n\n      val = typeof val === 'object' ? JSON.stringify(val) : (+val).toString(base);\n      var size = parseInt(p1);\n      /* padding size */\n\n      var ch = p1 && p1[0] + '' === '0' ? '0' : ' ';\n      /* isnull? */\n\n      while (val.length < size) val = p0 !== undefined ? val + ch : ch + val;\n      /* isminus? */\n\n\n      return val;\n    }\n\n    var regex = /%(-)?(0?[0-9]+)?([.][0-9]+)?([#][0-9]+)?([scfpexd%])/g;\n    return str.replace(regex, callback);\n  };\n  /**\n   *\n   * @param append The new string to append.\n   * @param args Argumets values to be formated.\n   */\n\n\n  Formatter.prototype.format = function (append) {\n    var args = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      args[_i - 1] = arguments[_i];\n    }\n\n    this.buffer += Formatter.form(append, args);\n  };\n  /**\n   * Returns the Formatter string value.\n   */\n\n\n  Formatter.prototype.toString = function () {\n    return this.buffer;\n  };\n\n  return Formatter;\n}();\n\nexport default Formatter; //# sourceMappingURL=Formatter.js.map","map":null,"metadata":{},"sourceType":"module"}