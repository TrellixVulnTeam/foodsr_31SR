{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nimport { ArgumentException, BinaryBitmap, ChecksumException, DecodeHintType, FormatException, HybridBinarizer, NotFoundException } from '@zxing/library';\nimport { HTMLCanvasElementLuminanceSource } from '../common/HTMLCanvasElementLuminanceSource';\nimport { canEnumerateDevices, hasNavigator } from '../common/navigator-utils';\nvar defaultOptions = {\n  delayBetweenScanAttempts: 500,\n  delayBetweenScanSuccess: 500,\n  tryPlayVideoTimeout: 5000\n};\n/**\n * Base class for browser code reader.\n */\n\nvar BrowserCodeReader = function () {\n  /**\n   * Creates an instance of BrowserCodeReader.\n   * @param {Reader} reader The reader instance to decode the barcode\n   * @param hints Holds the hints the user sets for the Reader.\n   */\n  function BrowserCodeReader(reader, hints, options) {\n    if (hints === void 0) {\n      hints = new Map();\n    }\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    this.reader = reader;\n    this.hints = hints;\n    this.options = __assign(__assign({}, defaultOptions), options);\n  }\n\n  Object.defineProperty(BrowserCodeReader.prototype, \"possibleFormats\", {\n    /**\n     * Allows to change the possible formats the decoder should\n     * search for while scanning some image. Useful for changing\n     * the possible formats during BrowserCodeReader::scan.\n     */\n    set: function (formats) {\n      this.hints.set(DecodeHintType.POSSIBLE_FORMATS, formats);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Defines what the videoElement src will be.\n   *\n   * @param videoElement\n   * @param stream The stream to be added as a source.\n   */\n\n  BrowserCodeReader.addVideoSource = function (videoElement, stream) {\n    // Older browsers may not have `srcObject`\n    try {\n      // @note Throws Exception if interrupted by a new loaded request\n      videoElement.srcObject = stream;\n    } catch (err) {\n      // @note Avoid using this in new browsers, as it is going away.\n      videoElement.src = URL.createObjectURL(stream);\n    }\n  };\n  /**\n   * Enables or disables the torch in a media stream.\n   *\n   * @experimental This doesn't work accross all browsers and is still a Draft.\n   */\n\n\n  BrowserCodeReader.mediaStreamSetTorch = function (track, onOff) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , track.applyConstraints({\n              advanced: [{\n                fillLightMode: onOff ? 'flash' : 'off',\n                torch: onOff ? true : false\n              }]\n            })];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Checks if the stream has torch support.\n   */\n\n\n  BrowserCodeReader.mediaStreamIsTorchCompatible = function (params) {\n    var e_1, _a;\n\n    var tracks = params.getVideoTracks();\n\n    try {\n      for (var tracks_1 = __values(tracks), tracks_1_1 = tracks_1.next(); !tracks_1_1.done; tracks_1_1 = tracks_1.next()) {\n        var track = tracks_1_1.value;\n\n        if (BrowserCodeReader.mediaStreamIsTorchCompatibleTrack(track)) {\n          return true;\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (tracks_1_1 && !tracks_1_1.done && (_a = tracks_1.return)) _a.call(tracks_1);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n\n    return false;\n  };\n  /**\n   *\n   * @param track The media stream track that will be checked for compatibility.\n   */\n\n\n  BrowserCodeReader.mediaStreamIsTorchCompatibleTrack = function (track) {\n    try {\n      var capabilities = track.getCapabilities();\n      return 'torch' in capabilities;\n    } catch (err) {\n      // some browsers may not be compatible with ImageCapture\n      // so we are ignoring this for now.\n      console.error(err);\n      console.warn('Your browser may be not fully compatible with WebRTC and/or ImageCapture specs. Torch will not be available.');\n      return false;\n    }\n  };\n  /**\n   * Checks if the given video element is currently playing.\n   */\n\n\n  BrowserCodeReader.isVideoPlaying = function (video) {\n    return video.currentTime > 0 && !video.paused && video.readyState > 2;\n  };\n  /**\n   * Searches and validates a media element.\n   */\n\n\n  BrowserCodeReader.getMediaElement = function (mediaElementId, type) {\n    var mediaElement = document.getElementById(mediaElementId);\n\n    if (!mediaElement) {\n      throw new ArgumentException(\"element with id '\" + mediaElementId + \"' not found\");\n    }\n\n    if (mediaElement.nodeName.toLowerCase() !== type.toLowerCase()) {\n      throw new ArgumentException(\"element with id '\" + mediaElementId + \"' must be an \" + type + \" element\");\n    }\n\n    return mediaElement;\n  };\n  /**\n   * Receives a source and makes sure to return a Video Element from it or fail.\n   */\n\n\n  BrowserCodeReader.createVideoElement = function (videoThingy) {\n    if (videoThingy instanceof HTMLVideoElement) {\n      return videoThingy;\n    }\n\n    if (typeof videoThingy === 'string') {\n      return BrowserCodeReader.getMediaElement(videoThingy, 'video');\n    }\n\n    if (!videoThingy && typeof document !== 'undefined') {\n      var videoElement = document.createElement('video');\n      videoElement.width = 200;\n      videoElement.height = 200;\n      return videoElement;\n    }\n\n    throw new Error('Couldn\\'t get videoElement from videoSource!');\n  };\n  /**\n   * Receives a source and makes sure to return an Image Element from it or fail.\n   */\n\n\n  BrowserCodeReader.prepareImageElement = function (imageSource) {\n    if (imageSource instanceof HTMLImageElement) {\n      return imageSource;\n    }\n\n    if (typeof imageSource === 'string') {\n      return BrowserCodeReader.getMediaElement(imageSource, 'img');\n    }\n\n    if (typeof imageSource === 'undefined') {\n      var imageElement = document.createElement('img');\n      imageElement.width = 200;\n      imageElement.height = 200;\n      return imageElement;\n    }\n\n    throw new Error('Couldn\\'t get imageElement from imageSource!');\n  };\n  /**\n   * Sets a HTMLVideoElement for scanning or creates a new one.\n   *\n   * @param videoElem The HTMLVideoElement to be set.\n   */\n\n\n  BrowserCodeReader.prepareVideoElement = function (videoElem) {\n    var videoElement = BrowserCodeReader.createVideoElement(videoElem); // @todo the following lines should not always be done this way, should conditionally\n    // change according were we created the element or not\n    // Needed for iOS 11\n\n    videoElement.setAttribute('autoplay', 'true');\n    videoElement.setAttribute('muted', 'true');\n    videoElement.setAttribute('playsinline', 'true');\n    return videoElement;\n  };\n  /**\n   * Checks if and HTML image is loaded.\n   */\n\n\n  BrowserCodeReader.isImageLoaded = function (img) {\n    // During the onload event, IE correctly identifies any images that\n    // weren’t downloaded as not complete. Others should too. Gecko-based\n    // browsers act like NS4 in that they report this incorrectly.\n    if (!img.complete) {\n      return false;\n    } // However, they do have two very useful properties: naturalWidth and\n    // naturalHeight. These give the true size of the image. If it failed\n    // to load, either of these should be zero.\n\n\n    if (img.naturalWidth === 0) {\n      return false;\n    } // No other way of checking: assume it’s ok.\n\n\n    return true;\n  };\n  /**\n   * Creates a binaryBitmap based in a canvas.\n   *\n   * @param canvas HTML canvas element containing the image source draw.\n   */\n\n\n  BrowserCodeReader.createBinaryBitmapFromCanvas = function (canvas) {\n    var luminanceSource = new HTMLCanvasElementLuminanceSource(canvas);\n    var hybridBinarizer = new HybridBinarizer(luminanceSource);\n    return new BinaryBitmap(hybridBinarizer);\n  };\n  /**\n   * Ovewriting this allows you to manipulate the snapshot image in anyway you want before decode.\n   */\n\n\n  BrowserCodeReader.drawImageOnCanvas = function (canvasElementContext, srcElement) {\n    canvasElementContext.drawImage(srcElement, 0, 0);\n  };\n\n  BrowserCodeReader.getMediaElementDimensions = function (mediaElement) {\n    if (mediaElement instanceof HTMLVideoElement) {\n      return {\n        height: mediaElement.videoHeight,\n        width: mediaElement.videoWidth\n      };\n    }\n\n    if (mediaElement instanceof HTMLImageElement) {\n      return {\n        height: mediaElement.naturalHeight || mediaElement.height,\n        width: mediaElement.naturalWidth || mediaElement.width\n      };\n    }\n\n    throw new Error('Couldn\\'t find the Source\\'s dimentions!');\n  };\n  /**\n   * 🖌 Prepares the canvas for capture and scan frames.\n   */\n\n\n  BrowserCodeReader.createCaptureCanvas = function (mediaElement) {\n    if (!mediaElement) {\n      throw new ArgumentException('Cannot create a capture canvas without a media element.');\n    }\n\n    if (typeof document === 'undefined') {\n      throw new Error('The page \"Document\" is undefined, make sure you\\'re running in a browser.');\n    }\n\n    var canvasElement = document.createElement('canvas');\n\n    var _a = BrowserCodeReader.getMediaElementDimensions(mediaElement),\n        width = _a.width,\n        height = _a.height;\n\n    canvasElement.style.width = width + 'px';\n    canvasElement.style.height = height + 'px';\n    canvasElement.width = width;\n    canvasElement.height = height;\n    return canvasElement;\n  };\n  /**\n   * Just tries to play the video and logs any errors.\n   * The play call is only made is the video is not already playing.\n   */\n\n\n  BrowserCodeReader.tryPlayVideo = function (videoElement) {\n    return __awaiter(this, void 0, void 0, function () {\n      var error_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (videoElement === null || videoElement === void 0 ? void 0 : videoElement.ended) {\n              console.error('Trying to play video that has ended.');\n              return [2\n              /*return*/\n              , false];\n            }\n\n            if (BrowserCodeReader.isVideoPlaying(videoElement)) {\n              console.warn('Trying to play video that is already playing.');\n              return [2\n              /*return*/\n              , true];\n            }\n\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , videoElement.play()];\n\n          case 2:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , true];\n\n          case 3:\n            error_1 = _a.sent();\n            console.warn('It was not possible to play the video.', error_1);\n            return [2\n            /*return*/\n            , false];\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Creates a canvas and draws the current image frame from the media element on it.\n   *\n   * @param mediaElement HTML media element to extract an image frame from.\n   */\n\n\n  BrowserCodeReader.createCanvasFromMediaElement = function (mediaElement) {\n    var canvas = BrowserCodeReader.createCaptureCanvas(mediaElement);\n    var ctx = canvas.getContext('2d');\n\n    if (!ctx) {\n      throw new Error('Couldn\\'t find Canvas 2D Context.');\n    }\n\n    BrowserCodeReader.drawImageOnCanvas(ctx, mediaElement);\n    return canvas;\n  };\n  /**\n   * Creates a binaryBitmap based in some image source.\n   *\n   * @param mediaElement HTML element containing drawable image source.\n   */\n\n\n  BrowserCodeReader.createBinaryBitmapFromMediaElem = function (mediaElement) {\n    var canvas = BrowserCodeReader.createCanvasFromMediaElement(mediaElement);\n    return BrowserCodeReader.createBinaryBitmapFromCanvas(canvas);\n  };\n\n  BrowserCodeReader.destroyImageElement = function (imageElement) {\n    imageElement.src = '';\n    imageElement.removeAttribute('src');\n    imageElement = undefined;\n  };\n  /**\n   * Lists all the available video input devices.\n   */\n\n\n  BrowserCodeReader.listVideoInputDevices = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var devices, videoDevices, devices_1, devices_1_1, device, kind, deviceId, label, groupId, videoDevice;\n\n      var e_2, _a;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!hasNavigator()) {\n              throw new Error('Can\\'t enumerate devices, navigator is not present.');\n            }\n\n            if (!canEnumerateDevices()) {\n              throw new Error('Can\\'t enumerate devices, method not supported.');\n            }\n\n            return [4\n            /*yield*/\n            , navigator.mediaDevices.enumerateDevices()];\n\n          case 1:\n            devices = _b.sent();\n            videoDevices = [];\n\n            try {\n              for (devices_1 = __values(devices), devices_1_1 = devices_1.next(); !devices_1_1.done; devices_1_1 = devices_1.next()) {\n                device = devices_1_1.value;\n                kind = device.kind === 'video' ? 'videoinput' : device.kind;\n\n                if (kind !== 'videoinput') {\n                  continue;\n                }\n\n                deviceId = device.deviceId || device.id;\n                label = device.label || \"Video device \" + (videoDevices.length + 1);\n                groupId = device.groupId;\n                videoDevice = {\n                  deviceId: deviceId,\n                  label: label,\n                  kind: kind,\n                  groupId: groupId\n                };\n                videoDevices.push(videoDevice);\n              }\n            } catch (e_2_1) {\n              e_2 = {\n                error: e_2_1\n              };\n            } finally {\n              try {\n                if (devices_1_1 && !devices_1_1.done && (_a = devices_1.return)) _a.call(devices_1);\n              } finally {\n                if (e_2) throw e_2.error;\n              }\n            }\n\n            return [2\n            /*return*/\n            , videoDevices];\n        }\n      });\n    });\n  };\n  /**\n   * Let's you find a device using it's Id.\n   */\n\n\n  BrowserCodeReader.findDeviceById = function (deviceId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var devices;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , BrowserCodeReader.listVideoInputDevices()];\n\n          case 1:\n            devices = _a.sent();\n\n            if (!devices) {\n              return [2\n              /*return*/\n              ];\n            }\n\n            return [2\n            /*return*/\n            , devices.find(function (x) {\n              return x.deviceId === deviceId;\n            })];\n        }\n      });\n    });\n  };\n  /**\n   * Unbinds a HTML video src property.\n   */\n\n\n  BrowserCodeReader.cleanVideoSource = function (videoElement) {\n    if (!videoElement) {\n      return;\n    } // forgets about that element 😢\n\n\n    try {\n      videoElement.srcObject = null;\n    } catch (err) {\n      videoElement.src = '';\n    }\n\n    if (videoElement) {\n      videoElement.removeAttribute('src');\n    }\n  };\n  /**\n   * Waits for a video to load and then hits play on it.\n   * To accomplish that, it binds listeners and callbacks to the video element.\n   *\n   * @param element The video element.\n   * @param callbackFn Callback invoked when the video is played.\n   */\n\n\n  BrowserCodeReader.playVideoOnLoadAsync = function (element, timeout) {\n    return __awaiter(this, void 0, void 0, function () {\n      var isPlaying;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , BrowserCodeReader.tryPlayVideo(element)];\n\n          case 1:\n            isPlaying = _a.sent();\n\n            if (isPlaying) {\n              return [2\n              /*return*/\n              , true];\n            }\n\n            return [2\n            /*return*/\n            , new Promise(function (resolve, reject) {\n              // waits 3 seconds or rejects.\n              var timeoutId = setTimeout(function () {\n                if (BrowserCodeReader.isVideoPlaying(element)) {\n                  // if video is playing then we had success, just ignore\n                  return;\n                }\n\n                reject(false);\n                element.removeEventListener('canplay', videoCanPlayListener);\n              }, timeout);\n              /**\n               * Should contain the current registered listener for video loaded-metadata,\n               * used to unregister that listener when needed.\n               */\n\n              var videoCanPlayListener = function () {\n                BrowserCodeReader.tryPlayVideo(element).then(function (hasPlayed) {\n                  clearTimeout(timeoutId);\n                  element.removeEventListener('canplay', videoCanPlayListener);\n                  resolve(hasPlayed);\n                });\n              }; // both should be unregistered after called\n\n\n              element.addEventListener('canplay', videoCanPlayListener);\n            })];\n        }\n      });\n    });\n  };\n  /**\n   * Sets the new stream and request a new decoding-with-delay.\n   *\n   * @param stream The stream to be shown in the video element.\n   * @param decodeFn A callback for the decode method.\n   */\n\n\n  BrowserCodeReader.attachStreamToVideo = function (stream, preview, previewPlayTimeout) {\n    if (previewPlayTimeout === void 0) {\n      previewPlayTimeout = 5000;\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var videoElement;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            videoElement = BrowserCodeReader.prepareVideoElement(preview);\n            BrowserCodeReader.addVideoSource(videoElement, stream);\n            return [4\n            /*yield*/\n            , BrowserCodeReader.playVideoOnLoadAsync(videoElement, previewPlayTimeout)];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , videoElement];\n        }\n      });\n    });\n  };\n  /**\n   * Returns a Promise that resolves when the given image element loads.\n   */\n\n\n  BrowserCodeReader._waitImageLoad = function (element) {\n    return new Promise(function (resolve, reject) {\n      var timeout = 10000; // waits 10 seconds or rejects.\n\n      var timeoutId = setTimeout(function () {\n        if (BrowserCodeReader.isImageLoaded(element)) {\n          // if video is playing then we had success, just ignore\n          return;\n        } // removes the listener\n\n\n        element.removeEventListener('load', imageLoadedListener); // rejects the load\n\n        reject();\n      }, timeout);\n\n      var imageLoadedListener = function () {\n        clearTimeout(timeoutId); // removes the listener\n\n        element.removeEventListener('load', imageLoadedListener); // resolves the load\n\n        resolve();\n      };\n\n      element.addEventListener('load', imageLoadedListener);\n    });\n  };\n  /**\n   * Checks if the `callbackFn` is defined, otherwise throws.\n   */\n\n\n  BrowserCodeReader.checkCallbackFnOrThrow = function (callbackFn) {\n    if (!callbackFn) {\n      throw new ArgumentException('`callbackFn` is a required parameter, you cannot capture results without it.');\n    }\n  };\n  /**\n   * Standard method to dispose a media stream object.\n   */\n\n\n  BrowserCodeReader.disposeMediaStream = function (stream) {\n    stream.getVideoTracks().forEach(function (x) {\n      return x.stop();\n    });\n    stream = undefined;\n  };\n  /**\n   * Gets the BinaryBitmap for ya! (and decodes it)\n   */\n\n\n  BrowserCodeReader.prototype.decode = function (element) {\n    // get binary bitmap for decode function\n    var canvas = BrowserCodeReader.createCanvasFromMediaElement(element);\n    return this.decodeFromCanvas(canvas);\n  };\n  /**\n   * Call the encapsulated readers decode\n   */\n\n\n  BrowserCodeReader.prototype.decodeBitmap = function (binaryBitmap) {\n    return this.reader.decode(binaryBitmap, this.hints);\n  };\n  /**\n   * Decodes some barcode from a canvas!\n   */\n\n\n  BrowserCodeReader.prototype.decodeFromCanvas = function (canvas) {\n    var binaryBitmap = BrowserCodeReader.createBinaryBitmapFromCanvas(canvas);\n    return this.decodeBitmap(binaryBitmap);\n  };\n  /**\n   * Decodes something from an image HTML element.\n   */\n\n\n  BrowserCodeReader.prototype.decodeFromImageElement = function (source) {\n    return __awaiter(this, void 0, void 0, function () {\n      var element;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!source) {\n              throw new ArgumentException('An image element must be provided.');\n            }\n\n            element = BrowserCodeReader.prepareImageElement(source);\n            return [4\n            /*yield*/\n            , this._decodeOnLoadImage(element)];\n\n          case 1:\n            // onLoad will remove it's callback once done\n            // we do not need to dispose or destroy the image\n            // since it came from the user\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n  /**\n   * Decodes an image from a URL.\n   */\n\n\n  BrowserCodeReader.prototype.decodeFromImageUrl = function (url) {\n    return __awaiter(this, void 0, void 0, function () {\n      var element;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!url) {\n              throw new ArgumentException('An URL must be provided.');\n            }\n\n            element = BrowserCodeReader.prepareImageElement(); // loads the image.\n\n            element.src = url;\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1,, 3, 4]);\n\n            return [4\n            /*yield*/\n            , this.decodeFromImageElement(element)];\n\n          case 2:\n            // it waits the task so we can destroy the created image after\n            return [2\n            /*return*/\n            , _a.sent()];\n\n          case 3:\n            // we created this element, so we destroy it\n            BrowserCodeReader.destroyImageElement(element);\n            return [7\n            /*endfinally*/\n            ];\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Continuously tries to decode the barcode from a stream obtained from the given constraints\n   * while showing the video in the specified video element.\n   *\n   * @param {MediaStream} [constraints] the media stream constraints to get s valid media stream to decode from\n   * @param {string|HTMLVideoElement} [previewElem] the video element in page where to show the video while\n   *  decoding. Can be either an element id or directly an HTMLVideoElement. Can be undefined, in\n   *  which case no video will be shown.\n   */\n\n\n  BrowserCodeReader.prototype.decodeFromConstraints = function (constraints, previewElem, callbackFn) {\n    return __awaiter(this, void 0, void 0, function () {\n      var stream, error_2;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            BrowserCodeReader.checkCallbackFnOrThrow(callbackFn);\n            return [4\n            /*yield*/\n            , navigator.mediaDevices.getUserMedia(constraints)];\n\n          case 1:\n            stream = _a.sent();\n            _a.label = 2;\n\n          case 2:\n            _a.trys.push([2, 4,, 5]);\n\n            return [4\n            /*yield*/\n            , this.decodeFromStream(stream, previewElem, callbackFn)];\n\n          case 3:\n            return [2\n            /*return*/\n            , _a.sent()];\n\n          case 4:\n            error_2 = _a.sent();\n            BrowserCodeReader.disposeMediaStream(stream);\n            throw error_2;\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * In one attempt, tries to decode the barcode from a stream obtained from the given constraints\n   * while showing the video in the specified video element.\n   *\n   * @param {MediaStream} [constraints] the media stream constraints to get s valid media stream to decode from\n   * @param {string|HTMLVideoElement} [preview] the video element in page where to show the video\n   *  while decoding. Can be either an element id or directly an HTMLVideoElement. Can be undefined,\n   *  in which case no video will be shown.\n   */\n\n\n  BrowserCodeReader.prototype.decodeFromStream = function (stream, preview, callbackFn) {\n    return __awaiter(this, void 0, void 0, function () {\n      var timeout, video, finalizeCallback, originalControls, videoTracks, controls, isTorchAvailable, torchTrack_1, switchTorch_1, stop_1;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            BrowserCodeReader.checkCallbackFnOrThrow(callbackFn);\n            timeout = this.options.tryPlayVideoTimeout;\n            return [4\n            /*yield*/\n            , BrowserCodeReader.attachStreamToVideo(stream, preview, timeout)];\n\n          case 1:\n            video = _a.sent();\n\n            finalizeCallback = function () {\n              // stops video tracks and releases the stream reference\n              BrowserCodeReader.disposeMediaStream(stream); // this video was just a preview, so in order\n              // to release the stream we gotta stop showing\n              // it (the stream) in the video element\n\n              BrowserCodeReader.cleanVideoSource(video);\n            };\n\n            originalControls = this.scan(video, callbackFn, finalizeCallback);\n            videoTracks = stream.getVideoTracks();\n            controls = __assign(__assign({}, originalControls), {\n              stop: function () {\n                originalControls.stop();\n              },\n              streamVideoConstraintsApply: function (constraints, trackFilter) {\n                return __awaiter(this, void 0, void 0, function () {\n                  var tracks, tracks_2, tracks_2_1, track, e_3_1;\n\n                  var e_3, _a;\n\n                  return __generator(this, function (_b) {\n                    switch (_b.label) {\n                      case 0:\n                        tracks = trackFilter ? videoTracks.filter(trackFilter) : videoTracks;\n                        _b.label = 1;\n\n                      case 1:\n                        _b.trys.push([1, 6, 7, 8]);\n\n                        tracks_2 = __values(tracks), tracks_2_1 = tracks_2.next();\n                        _b.label = 2;\n\n                      case 2:\n                        if (!!tracks_2_1.done) return [3\n                        /*break*/\n                        , 5];\n                        track = tracks_2_1.value;\n                        return [4\n                        /*yield*/\n                        , track.applyConstraints(constraints)];\n\n                      case 3:\n                        _b.sent();\n\n                        _b.label = 4;\n\n                      case 4:\n                        tracks_2_1 = tracks_2.next();\n                        return [3\n                        /*break*/\n                        , 2];\n\n                      case 5:\n                        return [3\n                        /*break*/\n                        , 8];\n\n                      case 6:\n                        e_3_1 = _b.sent();\n                        e_3 = {\n                          error: e_3_1\n                        };\n                        return [3\n                        /*break*/\n                        , 8];\n\n                      case 7:\n                        try {\n                          if (tracks_2_1 && !tracks_2_1.done && (_a = tracks_2.return)) _a.call(tracks_2);\n                        } finally {\n                          if (e_3) throw e_3.error;\n                        }\n\n                        return [7\n                        /*endfinally*/\n                        ];\n\n                      case 8:\n                        return [2\n                        /*return*/\n                        ];\n                    }\n                  });\n                });\n              },\n              streamVideoConstraintsGet: function (trackFilter) {\n                return videoTracks.find(trackFilter).getConstraints();\n              },\n              streamVideoSettingsGet: function (trackFilter) {\n                return videoTracks.find(trackFilter).getSettings();\n              },\n              streamVideoCapabilitiesGet: function (trackFilter) {\n                return videoTracks.find(trackFilter).getCapabilities();\n              }\n            });\n            isTorchAvailable = BrowserCodeReader.mediaStreamIsTorchCompatible(stream);\n\n            if (isTorchAvailable) {\n              torchTrack_1 = videoTracks === null || videoTracks === void 0 ? void 0 : videoTracks.find(function (t) {\n                return BrowserCodeReader.mediaStreamIsTorchCompatibleTrack(t);\n              });\n\n              switchTorch_1 = function (onOff) {\n                return __awaiter(_this, void 0, void 0, function () {\n                  return __generator(this, function (_a) {\n                    switch (_a.label) {\n                      case 0:\n                        return [4\n                        /*yield*/\n                        , BrowserCodeReader.mediaStreamSetTorch(torchTrack_1, onOff)];\n\n                      case 1:\n                        _a.sent();\n\n                        return [2\n                        /*return*/\n                        ];\n                    }\n                  });\n                });\n              };\n\n              controls.switchTorch = switchTorch_1;\n\n              stop_1 = function () {\n                originalControls.stop();\n                switchTorch_1(false);\n              };\n\n              controls.stop = stop_1;\n            }\n\n            return [2\n            /*return*/\n            , controls];\n        }\n      });\n    });\n  };\n  /**\n   * Continuously tries to decode the barcode from the device specified by device while showing\n   * the video in the specified video element.\n   *\n   * @param {string|null} [deviceId] the id of one of the devices obtained after calling\n   *  getVideoInputDevices. Can be undefined, in this case it will decode from one of the\n   *  available devices, preffering the main camera (environment facing) if available.\n   * @param {string|HTMLVideoElement|null} [video] the video element in page where to show the video\n   *  while decoding. Can be either an element id or directly an HTMLVideoElement. Can be undefined,\n   *  in which case no video will be shown.\n   */\n\n\n  BrowserCodeReader.prototype.decodeFromVideoDevice = function (deviceId, previewElem, callbackFn) {\n    return __awaiter(this, void 0, void 0, function () {\n      var videoConstraints, constraints;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            BrowserCodeReader.checkCallbackFnOrThrow(callbackFn);\n\n            if (!deviceId) {\n              videoConstraints = {\n                facingMode: 'environment'\n              };\n            } else {\n              videoConstraints = {\n                deviceId: {\n                  exact: deviceId\n                }\n              };\n            }\n\n            constraints = {\n              video: videoConstraints\n            };\n            return [4\n            /*yield*/\n            , this.decodeFromConstraints(constraints, previewElem, callbackFn)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n  /**\n   * Decodes something from an image HTML element.\n   */\n\n\n  BrowserCodeReader.prototype.decodeFromVideoElement = function (source, callbackFn) {\n    return __awaiter(this, void 0, void 0, function () {\n      var element, timeout;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            BrowserCodeReader.checkCallbackFnOrThrow(callbackFn);\n\n            if (!source) {\n              throw new ArgumentException('A video element must be provided.');\n            }\n\n            element = BrowserCodeReader.prepareVideoElement(source);\n            timeout = this.options.tryPlayVideoTimeout; // plays the video\n\n            return [4\n            /*yield*/\n            , BrowserCodeReader.playVideoOnLoadAsync(element, timeout)];\n\n          case 1:\n            // plays the video\n            _a.sent(); // starts decoding after played the video\n\n\n            return [2\n            /*return*/\n            , this.scan(element, callbackFn)];\n        }\n      });\n    });\n  };\n  /**\n   * Decodes a video from a URL until it ends.\n   */\n\n\n  BrowserCodeReader.prototype.decodeFromVideoUrl = function (url, callbackFn) {\n    return __awaiter(this, void 0, void 0, function () {\n      var element, finalizeCallback, timeout, controls;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            BrowserCodeReader.checkCallbackFnOrThrow(callbackFn);\n\n            if (!url) {\n              throw new ArgumentException('An URL must be provided.');\n            }\n\n            element = BrowserCodeReader.prepareVideoElement(); // starts loading the video\n\n            element.src = url;\n\n            finalizeCallback = function () {\n              // dispose created video element\n              BrowserCodeReader.cleanVideoSource(element);\n            };\n\n            timeout = this.options.tryPlayVideoTimeout; // plays the video\n\n            return [4\n            /*yield*/\n            , BrowserCodeReader.playVideoOnLoadAsync(element, timeout)];\n\n          case 1:\n            // plays the video\n            _a.sent();\n\n            controls = this.scan(element, callbackFn, finalizeCallback);\n            return [2\n            /*return*/\n            , controls];\n        }\n      });\n    });\n  };\n  /**\n   * In one attempt, tries to decode the barcode from a stream obtained from the given\n   * constraints while showing the video in the specified video element.\n   *\n   * @param constraints the media stream constraints to get s valid media stream to decode from\n   * @param videoSource the video element in page where to show the video while decoding.\n   *  Can be either an element id or directly an HTMLVideoElement. Can be undefined,\n   *  in which case no video will be shown.\n   *  The decoding result.\n   */\n\n\n  BrowserCodeReader.prototype.decodeOnceFromConstraints = function (constraints, videoSource) {\n    return __awaiter(this, void 0, void 0, function () {\n      var stream;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , navigator.mediaDevices.getUserMedia(constraints)];\n\n          case 1:\n            stream = _a.sent();\n            return [4\n            /*yield*/\n            , this.decodeOnceFromStream(stream, videoSource)];\n\n          case 2:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n  /**\n   * In one attempt, tries to decode the barcode from a stream obtained from the given\n   * constraints while showing the video in the specified video element.\n   *\n   * @param {MediaStream} [constraints] the media stream constraints to get s valid media stream to decode from\n   * @param {string|HTMLVideoElement} [video] the video element in page where to show the video while decoding.\n   *  Can be either an element id or directly an HTMLVideoElement. Can be undefined,\n   *  in which case no video will be shown.\n   */\n\n\n  BrowserCodeReader.prototype.decodeOnceFromStream = function (stream, preview) {\n    return __awaiter(this, void 0, void 0, function () {\n      var receivedPreview, video, result;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            receivedPreview = Boolean(preview);\n            return [4\n            /*yield*/\n            , BrowserCodeReader.attachStreamToVideo(stream, preview)];\n\n          case 1:\n            video = _a.sent();\n            _a.label = 2;\n\n          case 2:\n            _a.trys.push([2,, 4, 5]);\n\n            return [4\n            /*yield*/\n            , this.scanOneResult(video)];\n\n          case 3:\n            result = _a.sent();\n            return [2\n            /*return*/\n            , result];\n\n          case 4:\n            if (!receivedPreview) {\n              BrowserCodeReader.cleanVideoSource(video);\n            }\n\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * In one attempt, tries to decode the barcode from the device specified by deviceId\n   * while showing the video in the specified video element.\n   *\n   * @param deviceId the id of one of the devices obtained after calling getVideoInputDevices.\n   *  Can be undefined, in this case it will decode from one of the available devices,\n   *  preffering the main camera (environment facing) if available.\n   * @param videoSource the video element in page where to show the video while decoding.\n   *  Can be either an element id or directly an HTMLVideoElement. Can be undefined,\n   *  in which case no video will be shown.\n   */\n\n\n  BrowserCodeReader.prototype.decodeOnceFromVideoDevice = function (deviceId, videoSource) {\n    return __awaiter(this, void 0, void 0, function () {\n      var videoConstraints, constraints;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!deviceId) {\n              videoConstraints = {\n                facingMode: 'environment'\n              };\n            } else {\n              videoConstraints = {\n                deviceId: {\n                  exact: deviceId\n                }\n              };\n            }\n\n            constraints = {\n              video: videoConstraints\n            };\n            return [4\n            /*yield*/\n            , this.decodeOnceFromConstraints(constraints, videoSource)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n  /**\n   * Decodes something from an image HTML element.\n   */\n\n\n  BrowserCodeReader.prototype.decodeOnceFromVideoElement = function (source) {\n    return __awaiter(this, void 0, void 0, function () {\n      var element, timeout;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!source) {\n              throw new ArgumentException('A video element must be provided.');\n            }\n\n            element = BrowserCodeReader.prepareVideoElement(source);\n            timeout = this.options.tryPlayVideoTimeout; // plays the video\n\n            return [4\n            /*yield*/\n            , BrowserCodeReader.playVideoOnLoadAsync(element, timeout)];\n\n          case 1:\n            // plays the video\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this.scanOneResult(element)];\n\n          case 2:\n            // starts decoding after played the video\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n  /**\n   * Decodes a video from a URL.\n   */\n\n\n  BrowserCodeReader.prototype.decodeOnceFromVideoUrl = function (url) {\n    return __awaiter(this, void 0, void 0, function () {\n      var element, task;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!url) {\n              throw new ArgumentException('An URL must be provided.');\n            }\n\n            element = BrowserCodeReader.prepareVideoElement(); // starts loading the video\n\n            element.src = url;\n            task = this.decodeOnceFromVideoElement(element);\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1,, 3, 4]);\n\n            return [4\n            /*yield*/\n            , task];\n\n          case 2:\n            // it waits the task so we can destroy the created image after\n            return [2\n            /*return*/\n            , _a.sent()];\n\n          case 3:\n            // we created this element, so we destroy it\n            BrowserCodeReader.cleanVideoSource(element);\n            return [7\n            /*endfinally*/\n            ];\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Tries to decode from the video input until it finds some value.\n   */\n\n\n  BrowserCodeReader.prototype.scanOneResult = function (element, retryIfNotFound, retryIfChecksumError, retryIfFormatError) {\n    var _this = this;\n\n    if (retryIfNotFound === void 0) {\n      retryIfNotFound = true;\n    }\n\n    if (retryIfChecksumError === void 0) {\n      retryIfChecksumError = true;\n    }\n\n    if (retryIfFormatError === void 0) {\n      retryIfFormatError = true;\n    }\n\n    return new Promise(function (resolve, reject) {\n      // reuses the scan API, but returns at the first successful result\n      _this.scan(element, function (result, error, controls) {\n        if (result) {\n          // good result, returning\n          resolve(result);\n          controls.stop();\n          return;\n        }\n\n        if (error) {\n          // checks if it should retry\n          if (error instanceof NotFoundException && retryIfNotFound) {\n            return;\n          }\n\n          if (error instanceof ChecksumException && retryIfChecksumError) {\n            return;\n          }\n\n          if (error instanceof FormatException && retryIfFormatError) {\n            return;\n          } // not re-trying\n\n\n          controls.stop(); // stops scan loop\n\n          reject(error); // returns the error\n        }\n      });\n    });\n  };\n  /**\n   * Continuously decodes from video input.\n   *\n   * @param element HTML element to scan/decode from. It will not be disposed or destroyed.\n   * @param callbackFn Called after every scan attempt, being it successful or errored.\n   * @param finalizeCallback Called after scan proccess reaches the end or stop is called.\n   */\n\n\n  BrowserCodeReader.prototype.scan = function (element, callbackFn, finalizeCallback) {\n    var _this = this;\n\n    BrowserCodeReader.checkCallbackFnOrThrow(callbackFn);\n    /**\n     * The HTML canvas element, used to draw the video or image's frame for decoding.\n     */\n\n    var captureCanvas = BrowserCodeReader.createCaptureCanvas(element);\n    /**\n     * The HTML canvas element context.\n     */\n\n    var captureCanvasContext = captureCanvas.getContext('2d'); // cannot proceed w/o this\n\n    if (!captureCanvasContext) {\n      throw new Error('Couldn\\'t create canvas for visual element scan.');\n    }\n\n    var disposeCanvas = function () {\n      captureCanvasContext = undefined;\n      captureCanvas = undefined;\n    };\n\n    var stopScan = false;\n    var lastTimeoutId; // can be called to break the scan loop\n\n    var stop = function () {\n      stopScan = true;\n      clearTimeout(lastTimeoutId);\n      disposeCanvas();\n\n      if (finalizeCallback) {\n        finalizeCallback();\n      }\n    }; // created for extensibility\n\n\n    var controls = {\n      stop: stop\n    }; // this async loop allows infinite (or almost? maybe) scans\n\n    var loop = function () {\n      if (stopScan) {\n        // no need to clear timeouts as none was create yet in this scope.\n        return;\n      }\n\n      try {\n        BrowserCodeReader.drawImageOnCanvas(captureCanvasContext, element);\n\n        var result = _this.decodeFromCanvas(captureCanvas);\n\n        callbackFn(result, undefined, controls);\n        lastTimeoutId = setTimeout(loop, _this.options.delayBetweenScanSuccess);\n      } catch (error) {\n        callbackFn(undefined, error, controls);\n        var isChecksumError = error instanceof ChecksumException;\n        var isFormatError = error instanceof FormatException;\n        var isNotFound = error instanceof NotFoundException;\n\n        if (isChecksumError || isFormatError || isNotFound) {\n          // trying again\n          lastTimeoutId = setTimeout(loop, _this.options.delayBetweenScanAttempts);\n          return;\n        } // not trying again\n\n\n        disposeCanvas();\n\n        if (finalizeCallback) {\n          finalizeCallback(error);\n        }\n      }\n    }; // starts the async loop\n\n\n    loop();\n    return controls;\n  };\n  /**\n   * Waits for the image to load and then tries to decode it.\n   */\n\n\n  BrowserCodeReader.prototype._decodeOnLoadImage = function (element) {\n    return __awaiter(this, void 0, void 0, function () {\n      var isImageLoaded;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            isImageLoaded = BrowserCodeReader.isImageLoaded(element);\n            if (!!isImageLoaded) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , BrowserCodeReader._waitImageLoad(element)];\n\n          case 1:\n            _a.sent();\n\n            _a.label = 2;\n\n          case 2:\n            return [2\n            /*return*/\n            , this.decode(element)];\n        }\n      });\n    });\n  };\n\n  return BrowserCodeReader;\n}();\n\nexport { BrowserCodeReader }; //# sourceMappingURL=BrowserCodeReader.js.map","map":null,"metadata":{},"sourceType":"module"}